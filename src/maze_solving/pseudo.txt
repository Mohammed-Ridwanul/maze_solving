
matrix [25,25];
//set all blocked states

goal_node = [4,4]);

start_node = [1,1];

queue = [];
current_node = node(start_position);


path_array = arraylist();

recursive method(){

	path_array.add(current_node);
	
	if(goal_node == current_node ) done!!!, exit
	
	else
		
		bool flag = false;
		
		matrix[current_node] == visited;
		
		//left
		is(matrix[current_node.row,current_node.column-1] == not_visited){
		create left_node
			add left_node[current_node.row,current_node.column-1] to front queue
			flag = true;
		}

		//down
		is(matrix[current_node.row+1,current_node.column] == not_visited){
			add matrix[current_node.row+1,current_node.column] to front queue
			flag = true;
		}
		
		//right
		is(matrix[current_node.row,current_node.column+1] == not_visited){
			add matrix[current_node.row,current_node.column+1] to front queue
			flag =true;
		}
		
		//up
		is(matrix[current_node.row-1,current_node.column] == not_visited){
			add matrix[current_node.row-1,current_node.column] to front queue
			flag = true;
		}




		if(!flag) {
		
			path_array.pop_last();
		
		}
		
		if(queue.empty()){
			
			exit; -->not found
		
		}
		
		current_node = queue.first();
		queue.pop();
		
		
		
		recursive_method();
		

}


cost = path_array.size();



//EXtra stuff

		if(myQueue.isEmpty()){return;}
		
		if(myQueue.size() == 1){
			node tmp = myQueue.removeFirst();
			beef(tmp);
			return;
		}else{
			
			node tmp = myQueue.removeFirst();
			if(!flag){
				//pop last until depth 
				for(int i=path_array.size() - 1; i<myQueue.peek().getDepth(); i--){
					path_array.remove(i);
				}
			}
			
			beef(tmp);
		}